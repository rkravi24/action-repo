# GitHub Actions Repository

This repository is monitored by GitHub webhooks to track push, pull request, and merge activities.

## Purpose

This repository serves as the source for GitHub webhook events that are captured and displayed by the webhook monitoring system.

## Webhook Configuration

This repository is configured to send webhook events to the monitoring endpoint for the following actions:

- **Push events**: When code is pushed to any branch
- **Pull request events**: When pull requests are opened
- **Merge events**: When pull requests are merged

## Repository Structure

```
action-repo/
├── README.md           # This file
├── .gitignore         # Git ignore rules
├── src/               # Source code directory
│   └── main.py        # Sample application
├── docs/              # Documentation
│   └── setup.md       # Setup instructions
└── tests/             # Test files
    └── test_main.py   # Sample tests
```

## Webhook Events Tracked

### Push Events
- Triggered when commits are pushed to any branch
- Captures: author, target branch, timestamp

### Pull Request Events
- Triggered when pull requests are opened
- Captures: author, source branch, target branch, timestamp

### Merge Events
- Triggered when pull requests are merged
- Captures: author, source branch, target branch, timestamp

## Setup Instructions

1. **Clone the repository**
   ```bash
   git clone <action-repo-url>
   cd action-repo
   ```

2. **Create a new branch for testing**
   ```bash
   git checkout -b feature/test-webhook
   ```

3. **Make some changes and push**
   ```bash
   echo "Test change" >> README.md
   git add README.md
   git commit -m "Test webhook functionality"
   git push origin feature/test-webhook
   ```

4. **Create a pull request**
   - Go to GitHub repository
   - Create a pull request from `feature/test-webhook` to `main`
   - This should trigger a pull request webhook event

5. **Merge the pull request**
   - Merge the pull request
   - This should trigger a merge webhook event

## Testing Webhook Events

To test different webhook events:

### Test Push Event
```bash
# Make any change to any file
echo "Push test $(date)" >> test.txt
git add test.txt
git commit -m "Test push event"
git push origin main
```

### Test Pull Request Event
```bash
# Create a new branch
git checkout -b test/pull-request
echo "PR test $(date)" >> pr-test.txt
git add pr-test.txt
git commit -m "Test pull request event"
git push origin test/pull-request

# Then create a pull request via GitHub UI
```

### Test Merge Event
```bash
# After creating a pull request, merge it via GitHub UI
# This will trigger the merge webhook event
```

## Sample Application

The repository includes a simple Python application to demonstrate webhook tracking:

```python
# src/main.py
def main():
    print("Hello from action-repo!")
    print("This repository is monitored by GitHub webhooks")

if __name__ == "__main__":
    main()
```

## Webhook Monitoring

Events from this repository are captured and displayed in real-time by the webhook monitoring system. You can view the activity at:

- **Webhook Endpoint**: `http://your-webhook-server.com:5000/webhook`
- **Web UI**: `http://your-webhook-server.com:5000`

## Branch Protection Rules

Consider setting up branch protection rules to ensure webhook events are triggered properly:

1. Go to repository Settings → Branches
2. Add protection rule for `main` branch
3. Enable "Require pull request reviews before merging"
4. This ensures all changes go through pull requests, generating webhook events

## Contributing

1. Create a new branch for your feature
2. Make your changes
3. Create a pull request
4. All webhook events will be captured and displayed in the monitoring system

## Webhook Configuration Details

The webhook is configured with:
- **Payload URL**: Points to your webhook server
- **Content Type**: `application/json`
- **Secret**: Secured with webhook secret
- **Events**: 
  - Push events
  - Pull request events
  - All events related to repository activity

## Notes

- Every push, pull request, and merge in this repository triggers webhook events
- The webhook monitoring system captures and displays these events in real-time
- Use this repository to test and demonstrate the webhook functionality
- All webhook events are stored in MongoDB for historical tracking